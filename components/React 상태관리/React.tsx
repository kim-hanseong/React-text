//*** 리액트의 상태관리 왜 필요한가? ***
//* 흔히 웹 애플리케이션을 개발할 때 이야기하는 상태는 어떠한 의미를 지닌 값이며 *
//* 어플리케이션의 시나리오에 따라 지속적으로 변경될 수 있는 값을 의미한다. *

//* 대표적으로는 *
//* UI : 기본적으로 다크모드 , 라디오 등을 비롯한 노출 여부 등 많은 종류의 상태가 존재 *
//* URL : 브라우저에서 관리되고 있는 상태값으로 참고 할 만한 상태가 존재 할 수 가 있다 (사용자 라우팅에 따라 달라짐) *
//* form : 폼 상태도 로딩 중인지 현재 제출됐는지 접근 불가능한지 값이 유효한지 등 모두가 상태로 관리된다. *

//* Flux 패턴의 등장 *
//* Flux 가 나올 시즌은 어플리케이션이 비대해지고 상태도 많아짐에 따라 어디서 어떤 일이 일어나서 이 상태가 변형되었는지 추적하고 이해하기 어려운 상황이였다. *
//* 페이스북 팀이 데이터의 흐름을 변경하는걸 제안하고 양방향성이 아닌 단방향성으로 방향을 맞추기로 한것이 시작이다. *

//* 용어의 정의로는  *
//* 액션 : 액션 발생 시 함께 포함시킬 데이터를 의미한다 액션타입과 데이터 를 각 정의해 이를 디스패쳐로 보낸다 *
//* 디스패쳐 : 액션을 스토어에 보내는 역할을한다  *
//* 스토어 : 여긴 모든 메서드를 가지고 잇다 액션의 타입에 따라 어떻게 변경할 지 정의되어있다. *
//* 뷰 : 리액트의 컴포넌트 해당하는 부분으로 스토어에 만들어진 데이터를 가져와 화면을 랜더링 하는 역할을 수행한다  *

//* 단점으로는 데이터를 받아올 때와 못 받아올때의 상황을 모두 코드로 작성해야했고 그에따라 코드량이 늘어났지만 *
//* 장점으로는 데이터가 단방향으로 이동하기에 정리와 위치 표현식이 더욱 간단해졌다. *

