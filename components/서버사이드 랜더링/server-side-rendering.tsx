//*** 서버사이드 랜더링  ***
//* 서버사이드 랜더링이란 최초에 사용자에게 보여줄 페이지를 서버에서 랜더링 해 빠르게 사용자에게 화면을 제공하는 방식을 의미한다. *
//* 싱글 페이지와의 차이는 책임을 어디다 두느냐다 *
//* 클라이언트 랜더링은 사용자 기기의 성능에 영향을 받지만 서버 사이드 랜더링은 서버에서 제공하기에 보다 안정적인 랜더링이 가능하다. *

//* 서버 사이드 랜더링의 장점  *

//* 1. 최초 페이지 진입이 비교적 빠르다 *
//* : 해당 보여주는 페이지를 누구보다 빠르게 만들기 때문에 보여지는 페이지가 다른 싱글 어플리케이션 보단 빠르게 랜더링이 된다.  *
//* but : 서버가 사용자를 감당하지 못하면 싱글 페이지 보다 느려지는걸 볼 수 있다 . *

//* 2. 검색 엔진과 sns 공유 등 메타데이터 제공이 쉽다.  *
//* : 서버 사이드 랜더링이 왜 검색엔진에 도움이 되는가 ? *
//* A. 검색 엔진 로봇이 페이지에 진입한다 *
//* B. 페이지가 HTML 정보를 제공해 로봇이 이 HTML 을 다운한다 대신 자바스크립트를 실행하진 않는다. *
//* C. 다운로드 한 HTML 페이지 내부의 오픈 그래프 나 메타 태그정보를 기반으로 페이지의 검색정보를 가져오고 이를 바탕으로 검색 엔진에 저장한다. *

//* 3. 누적 레이아웃 이동이 적다. *
//※ 누적 레이아웃 이란 ? ※
//* : 랜더링 중 html 이 삭제되거나 추가되어 화면이 덜컥 거리는 것과 같은 부정적인 사용자 경험을 말한다 *
//* 서버사이드 랜더링은 모든 api 기반을 완료 한 뒤 랜더링 한 뒤 이러한 문제에서 비교적 자유롭다 *

//* 4. 사용자 기기의 성능 여부가 관여가 적다. *
//* 서버에서 랜더링을 한 뒤 출력하기에 오로지 자바스크립트를 읽는것을 나누기에 괜찮아진다 . *

//* 5. 보안에 안전하다 *
//* api 호출이나 인증 처럼 노출되면 안되는것도 방치 할 준비가 돼 있기에 보안 위협을 피할 수 있는 장점이 있다. *


//* 서버 사이드 랜더링의 단점  *
//* 1. 소스코드를 작성할 때 항상 서버를 고려해야한다. *
//* 싱글페이지와 다르게 서버에서도 랜더링을 돕기 때문에 서버를 고려하지 않는 코드는 오히려 싱글페이지보다 더 느리게 랜더링 되게 할 수 있다 . *

//* 2. 서비스 지연에 대한 문제 *
//* : 서버사이드에서 랜더링이 일어나면 전부 랜더링이 되고 보여주기 전 어떤 상태도 보여줄 수 없는게 문제임 *

